{"version":3,"file":"midifile.js","sourceRoot":"","sources":["midifile.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,kBAAkB,CAAC;AACpD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AAgBxC,MAAM,OAAO,QAAQ;IAArB;QAGW,SAAI,GAAW,EAAE,CAAC;QAElB,WAAM,GAAgB,EAAE,CAAC;QAEzB,aAAQ,GAAa,EAAE,CAAC;IAuCnC,CAAC;IArCG,MAAM,CAAC,IAAI,CAAC,GAAW;QACnB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACzB,QAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;oBACnC,gBAAgB,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAe,EAAE,EAAE;wBAC9C,MAAM,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;wBAC5B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;wBACjB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;wBAChB,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;wBAEvC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BACnC,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;4BACjC,IAAI,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gCAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,aAAa;oCAAE,OAAO,CAAC,IAAI,CAAC,uEAAuE,CAAC,CAAC;gCAC1H,6EAA6E;gCAC7E,IAAI,KAAK,CAAC,aAAa,IAAI,KAAK,CAAC,aAAa;oCAAE,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,KAAK,CAAC,aAAa,CAAC;gCAClG,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,aAAa;oCAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;6BAC7E;iCAAM,IAAI,KAAK;gCAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC9C,CAAC,CAAC,CAAC;wBAEH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;4BAC1B,KAAK,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;wBACjD,CAAC,CAAC,CAAC;wBAEH,OAAO,CAAC,IAAI,CAAC,CAAC;oBAClB,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAES,UAAU,CAAC,KAAa;QAC9B,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YACtC,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;SACtD;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;CACJ","sourcesContent":["import { IMidiFile } from 'midi-json-parser-worker';\nimport { parseArrayBuffer } from 'midi-json-parser';\nimport { MIDITrack } from './miditrack';\n\nexport interface TimeSignature {\n    numerator: number;\n    denominator: number;\n    metronome?: number;\n    thirtyseconds?: number;\n}\n\nexport interface TimeMeta {\n    timeSignature?: TimeSignature;\n    tempo?: number;\n    division?: number;\n    duration?: number;\n}\n\nexport class MIDIFile {\n    data?: IMidiFile;\n\n    public name: string = '';\n\n    public tracks: MIDITrack[] = [];\n\n    public timeMeta: TimeMeta = {};\n\n    static Load(uri: string): Promise<MIDIFile> {\n        return new Promise((resolve) => {\n            fetch(uri).then((response) => {\n                response.arrayBuffer().then((buffer) => {\n                    parseArrayBuffer(buffer).then((json: IMidiFile) => {\n                        const midi = new MIDIFile();\n                        midi.data = json;\n                        midi.name = uri;\n                        midi.timeMeta.division = json.division;\n\n                        midi.data.tracks.forEach((_track, i) => {\n                            const track = midi.parseTrack(i);\n                            if (track?.events.length === 0) {\n                                if (i !== 0 && track.hasTimingInfo) console.warn('Timing information is coming from a track that is not the first track');\n                                // this might be a timing track, record the info and don't add it to the list\n                                if (track.timeSignature && track.hasTimingInfo) midi.timeMeta.timeSignature = track.timeSignature;\n                                if (track.tempo && track.hasTimingInfo) midi.timeMeta.tempo = track.tempo;\n                            } else if (track) midi.tracks.push(track);\n                        });\n\n                        midi.tracks.forEach((track) => {\n                            track.populateMissingTimeData(midi.timeMeta);\n                        });\n\n                        resolve(midi);\n                    });\n                });\n            });\n        });\n    }\n\n    protected parseTrack(track: number) {\n        if (this.data && this.data.tracks[track]) {\n            return MIDITrack.fromMIDI(this.data.tracks[track]);\n        }\n        return undefined;\n    }\n}"]}