{"version":3,"file":"miditrack.js","sourceRoot":"","sources":["miditrack.ts"],"names":[],"mappings":"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","sourcesContent":["import { TimeMeta, TimeSignature } from './midifile.js';\nimport { NoteEvent } from './noteevent.js';\n\nconst defaultTimeSignature: TimeSignature = { numerator: 4, denominator: 4 };\nconst defaultBPM = 120;\n\nexport class MIDITrack {\n    protected timeMeta: TimeMeta = {};\n\n    events: NoteEvent[] = [];\n    name: string = '';\n    noteRange: [number, number] = [0, 0];\n\n    static fromMIDI(events: any[]): MIDITrack {\n        const t = new MIDITrack();\n        t.parseMIDI(events);\n        return t;\n    }\n\n    static fromNoteEvents(events: NoteEvent[], time: TimeMeta): MIDITrack {\n        const t = new MIDITrack();\n        t.events = events;\n        t.timeMeta.duration = events[events.length -1].time;\n        t.timeMeta.timeSignature = time.timeSignature;\n        t.processTrack();\n        return t;\n    }\n\n    get hasTimingInfo() {\n        return this.timeMeta.tempo !== undefined || this.timeMeta.timeSignature !== undefined;\n    }\n\n    get sequence() { return this.sequenceAtBPM(this.BPM); }\n\n    get duration() { return (this.timeMeta.duration || 0) / this.BPM }\n\n    sequenceAtBPM(bpm: number) {\n        return this.events.map(e => {\n            return {\n                time: e.time / bpm,\n                note: e.note,\n                duration: e.duration / bpm,\n                velocity: e.velocity }; });\n    }\n\n    get BPM() {\n        if (this.timeMeta.tempo && this.timeMeta.division) {\n            return this.timeMeta.division / (this.timeMeta.tempo / 1000000);\n        }\n        if (this.timeMeta.division) {\n            return this.timeMeta.division\n        }\n        return defaultBPM;\n    }\n\n    get tempo() { return this.timeMeta.tempo }\n\n\n    set tempo(val) { this.timeMeta.tempo = val; }\n\n    get timeSignature() {\n        return this.timeMeta.timeSignature || defaultTimeSignature;\n    }\n\n    get beatRange() { return [ 0, Math.ceil(this.timeMeta.duration || 0) ]; }\n\n    parseMIDI(events: any[]) {\n        let absTime = 0;\n        const downNotes: NoteEvent[] = [];\n        events.forEach((event: any) => {\n            if (event.trackName) {\n                this.name = event.trackName;\n            }\n            if (event.timeSignature) {\n                this.timeMeta.timeSignature = Object.assign({}, event.timeSignature);\n            }\n            if (event.setTempo) {\n                this.timeMeta.tempo = event.setTempo.microsecondsPerQuarter;\n            }\n            if (event.noteOn) {\n                const noteEvent = {\n                    time: absTime,\n                    duration: 0,\n                    delta: event.delta,\n                    note: event.noteOn.noteNumber,\n                    channel: event.noteOn.channel,\n                    velocity: event.noteOn.velocity\n                };\n                this.events.push(noteEvent);\n                downNotes.push(noteEvent);\n            }\n            if (event.noteOff) {\n                const indx = downNotes.findIndex((note) => note.note === event.noteOff.noteNumber);\n                if (indx !== -1) {\n                    const noteEvent = downNotes.splice(indx, 1)[0];\n                    noteEvent.duration = (absTime + event.delta) - noteEvent.time;\n                }\n            }\n            absTime += event.delta;\n        });\n        this.timeMeta.duration = absTime;\n        this.processTrack();\n    }\n\n    populateMissingTimeData(time: TimeMeta) {\n        if (this.timeMeta.division === undefined) {\n            this.timeMeta.division = time.division;\n        }\n        if (this.timeMeta.timeSignature === undefined) {\n            this.timeMeta.timeSignature = Object.assign({}, time.timeSignature);\n        }\n        if (this.timeMeta.tempo === undefined) {\n            this.timeMeta.tempo = time.tempo;\n        }\n    }\n\n    protected processTrack() {\n        this.noteRange[0] = this.events.reduce((acc, event) => { return Math.min ((event as NoteEvent).note || acc, acc); }, Infinity);\n        this.noteRange[1] = this.events.reduce((acc, event) => { return Math.max ((event as NoteEvent).note || acc, acc); }, 0) + 1;\n    }\n}"]}