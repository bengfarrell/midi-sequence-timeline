{"version":3,"file":"zyklus.js","sourceRoot":"","sources":["zyklus.ts"],"names":[],"mappings":";AAAA,aAAa;AACb,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,UACtC,QAAkB,EAAE,oCAAoC;AACxD,QAAgB,EAAE,yBAAyB;AAC3C,QAAQ,GAAG,GAAG,EAAE,6BAA6B;AAC7C,OAAO,GAAG,GAAG;IAEb,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,mBAAmB;IACjC,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,qBAAqB;IACpC,IAAI,SAAS,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,sBAAsB;IAC/C,IAAI,UAAU,GAAG,IAAI,CAAC;IACtB,MAAM,WAAW,GAAG,CAAC,MAAgB,EAAE,EAAE,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxE,OAAO,GAAG,OAAO,IAAI,QAAQ,GAAG,CAAC,CAAC;IAClC,MAAM,MAAM,GAAG,GAAG,EAAE;QAClB,MAAM,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;QAC3B,MAAM,SAAS,GAAG,CAAC,GAAG,QAAQ,GAAG,OAAO,CAAC,CAAC,gCAAgC;QAC1E,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,KAAK,GAAG,CAAC,GAAG,UAAU,CAAC;SACxB;QACD,iDAAiD;QACjD,OAAO,KAAK,GAAG,SAAS,EAAE;YACxB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC;YAClD,KAAK,IAAI,CAAC,IAAI,QAAQ,CAAC,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC9C,KAAK,IAAI,QAAQ,CAAC,CAAC,8BAA8B;YACjD,IAAI,EAAE,CAAC;SACR;IACH,CAAC,CAAC;IACF,IAAI,UAAkB,CAAC;IACvB,MAAM,KAAK,GAAG,GAAG,EAAE;QACjB,MAAM,EAAE,CAAC;QACT,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,GAAG,IAAI,CAAC,CAAC;IAC3D,CAAC,CAAC;IACF,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IAC9C,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;IAC5B,MAAM,IAAI,GAAG,GAAG,EAAE;QAChB,IAAI,GAAG,CAAC,CAAC;QACT,KAAK,GAAG,CAAC,CAAC;QACV,KAAK,EAAE,CAAC;IACV,CAAC,CAAC;IACF,cAAc;IACd,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;AACvD,CAAC,CAAC","sourcesContent":["// @ts-ignore\nAudioContext.prototype['createClock'] = function (\n  callback: Function, // called slightly before each cycle\n  duration: number, // duration of each cycle\n  interval = 0.1, // interval between callbacks\n  overlap = 0.1, // overlap between callbacks\n) {\n  let tick = 0; // counts callbacks\n  let phase = 0; // next callback time\n  let precision = 10 ** 4; // used to round phase\n  let minLatency = 0.01;\n  const setDuration = (setter: Function) => (duration = setter(duration));\n  overlap = overlap || interval / 2;\n  const onTick = () => {\n    const t = this.currentTime;\n    const lookahead = t + interval + overlap; // the time window for this tick\n    if (phase === 0) {\n      phase = t + minLatency;\n    }\n    // callback as long as we're inside the lookahead\n    while (phase < lookahead) {\n      phase = Math.round(phase * precision) / precision;\n      phase >= t && callback(phase, duration, tick);\n      phase += duration; // increment phase by duration\n      tick++;\n    }\n  };\n  let intervalID: number;\n  const start = () => {\n    onTick();\n    intervalID = window.setInterval(onTick, interval * 1000);\n  };\n  const clear = () => clearInterval(intervalID);\n  const pause = () => clear();\n  const stop = () => {\n    tick = 0;\n    phase = 0;\n    clear();\n  };\n  // setCallback\n  return { setDuration, start, stop, pause, duration };\n};\n"]}